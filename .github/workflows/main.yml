#This is a basic workflow to help you get started with Actions

name: GitHub Actions Maven Build Example

on:
  push:
    branches: [ master ]
jobs:
  terraform:
    name: 'Terraform'
    env:
      GITHUB_TOKEN: ${{ secrets.NEW_TOKEN }}
      TF_ACTION_WORKING_DIR: .
     # ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      #ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: dev

    defaults:
      run:
        shell: bash

    
  #build-on-ubuntu:
    # The type of runner that the job will run on
    #runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Step 1 - Checkout main branch from GitHub 
        uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Step 2 - Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
    
      - name: Step 3 - Have GitHub Actions Build Maven Project
        working-directory: .
        run: |
          mvn -B package --file pom.xml
          #mkdir staging && cp target/*.jar staging
          #cp webapps/*.jar

      - name: Step 4 - Set up a cache for Maven
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Step 5 - Persist workflow data as artificats
        uses: actions/upload-artifact@v2
        with:
          name: jarfile
          #working-directory: .
          #github-actions-artifact
          path: /home/runner/work/rock-paper-scissors/rock-paper-scissors/target/**
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: karthikvemula/tomcat2:war
       # log into Azure
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        
      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v1
        with:
        # Azure credentials i.e. output of `az ad sp create-for-rbac --sdk-auth`
          creds: '${{secrets.AZURE_CREDENTIALS}}'
        # Resource Group Name
          resource-group: AkS_RG
        # AKS Cluster Name
          cluster-name: ga-aks-demo-cluster
    

  # Create K8s secrets to pull images
      - name: Create secret in Kubernetes cluster
        uses: Azure/k8s-create-secret@v1.1
        with:
        # Container registry url
          container-registry-url: https://hub.docker.com/u/karthikvemula
          #https://index.docker.io/v1/
        # Container registry username
          container-registry-username: '${{secrets.DOCKERHUB_USERNAME}}'
        # Container registry password
          container-registry-password:  '${{secrets.DOCKERHUB_PASSWORD}}'
        # Type of Kubernetes secret. For example, docker-registry or generic
          secret-type: docker-registry
        # Name of the secret. You can use this secret name in the Kubernetes YAML configuration file.
          secret-name: docker-image-pull-secret
        
      # Deploy to k8s cluster
      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v1
        with:        
        # Path to the manifest files which will be used for deployment.
          manifests: |
            k8s/deployment.yml
            k8s/service.yml
        # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
          images: '${{secrets.DOCKER_LOGIN}}/githubactions-aks-demo:${{github.sha}}'
        # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
          imagepullsecrets: docker-image-pull-secret
        # deploy/promote/reject
          action: deploy
        
      
     
      
          
       

        


          
          
          






